name: Python application


on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  # Lint Stage
  lint_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Test Stage
  py_test:
    runs-on: ubuntu-latest
    needs: lint_test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt

    - name: Test with pytest and generate coverage report
      run: |
        export PYTHONPATH=src
        pytest --cov=src --cov-report=xml --cov-report=html:coverage_report src/test/test.py

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage_report

  # Security Scan Stage
  Snyk_scan:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test
        args: --file=src --sarif-file-output=snyk-python.sarif

    - name: Upload Snyk Python report
      uses: actions/upload-artifact@v3
      with:
        name: snyk-python-report
        path: snyk-python.sarif

  # Sonar_scan:
  #   runs-on: ubuntu-latest
  #   needs: [lint_test,  py_test, Snyk_scan ]
  #   steps:

  #   - name: Checkout repository
  #     uses: actions/checkout@v4
      

  #   - name: Install jq
  #     run: sudo apt-get update && sudo apt-get install -y jq


  #   - name: curl to server endpoint
  #     run: curl http://18.234.82.32:9000

  #   - name: SonarQube Scan
  #     uses: SonarSource/sonarqube-scan-action@v2.0.2
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  #   - name: SonarQube Quality Gate check
  #     id: sonarqube-quality-gate-check
  #     uses: sonarsource/sonarqube-quality-gate-action@master
  #     timeout-minutes: 5
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  # Docker Build Stage
  docker_build:
    runs-on: ubuntu-latest
    needs: [lint_test, py_test, Snyk_scan ]
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        tags: appdev:latest
        load: true

    - name: Save Docker image as .tar file
      run: |
        docker save -o /tmp/docker-images.tar appdev:latest
  
    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: /tmp/docker-images.tar

    - name: List Docker images
      run: |
        docker images

  # Docker Security Scan Stage
  snyk_image_scan:
    runs-on: ubuntu-latest
    needs: docker_build
    steps:

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Scan Docker image with Snyk
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: appdev:latest
        args: --file=${{ inputs.dockerfile-path }} --severity-threshold=high --sarif-file-output=snyk-docker.sarif

    - name: Upload Snyk Docker report
      uses: actions/upload-artifact@v3
      with:
        name: snyk-docker-report
        path: snyk-docker.sarif
  # Deployment Stage
  publish:
    runs-on: ubuntu-latest
    needs: snyk_image_scan
    steps:
    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image
        path: /tmp
    
    - name: List files in /tmp
      run: ls -l /tmp

    - name: Load Docker image
      run: |
        docker load -i /tmp/docker-images.tar

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        docker tag appdev:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Post-Deployment Tasks Stage
  deploy:
    runs-on: ubuntu-latest
    needs: publish
    steps:
    - name: Set up SSH key  
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
        

    - name: Install Docker on Ubuntu EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
        sudo apt update -y
        sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt-cache policy docker-ce
        sudo apt install docker-ce -y
        sudo chmod 666 /var/run/docker.sock
        sudo usermod -aG docker $USER
        sudo systemctl restart docker
        EOF

    

    - name: Pull and run Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: us-east-1
        AWS_DEFAULT_OUTPUT: json
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
          # sudo apt install curl unzip -y
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          # sudo ./aws/install
          # export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          # export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          # export AWS_REGION=$AWS_REGION
          echo "AWS CLI version:"
          aws --version
          sudo -i
          export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
          export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
          export AWS_REGION=us-east-1
          export AWS_DEFAULT_OUTPUT=json
          echo "AWS CLI version:"
          aws --version
          echo "Testing AWS credentials by listing S3 buckets:"
          aws s3 ls
          echo "AWS configuration:"
          aws configure list
          aws sts get-caller-identity
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 022499010678.dkr.ecr.us-east-1.amazonaws.com
          # sudo aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker run -d -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker ps
      
