# name: Docker Image CI

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:

#   build:

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4
#     - name: Build the Docker image
#       run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)


# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r src/requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        export PYTHONPATH=src
        pytest  src/test/test.py
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test
      
    - name: Checkout repository
      uses: actions/checkout@v4
  
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        tags: appdev:latest
        load: true
      
    - name: List Docker images
      run: |
        docker images

    - name: Scan Docker image 
      uses: snyk/actions/docker@master
      continue-on-error: true
      env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
          image: appdev:latest
          args: --file=Dockerfile --severity-threshold=high --sarif-file-output=snyk.sarif


    - name: Setup AWS ECR Details
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-pf-aws-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
      run: |
        docker tag appdev:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Set up SSH key  
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      
    - name: Verify SSH Connection 
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 
    - name: Install Docker on Ubuntu EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
        sudo apt update -y
        sudo apt install apt-transport-https ca-certificates curl software-properties-common -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt-cache policy docker-ce
        sudo apt install docker-ce -y
        sudo chmod 666 /var/run/docker.sock
        sudo usermod -aG docker $USER
        sudo systemctl restart docker

    - name: pull and run docker image
      env:
        ECR_REGISTRY: ${{ steps.login-pf-aws-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
          # sudo apt install curl unzip -y
          # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          # unzip awscliv2.zip
          # sudo ./aws/install
          export AWS_ACCESS_KEY=$AWS_ACCESS_KEY
          export AWS_SECRET_KEY=$AWS_SECRET_KEY
          export AWS_REGION=$AWS_REGION
          sudo aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 022499010678.dkr.ecr.us-east-1.amazonaws.com
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          sudo docker run -d -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:latest
        

